#ifndef TrajectoryPlanner_idl
#define TrajectoryPlanner_idl

#include "BasicDataType.idl"
#include "ExtendedDataTypes.idl"
#include "InterfaceDataTypes.idl"

module Manipulation{

	struct ObjectIdentifier {
		string name;
	};

	struct ObjectInfo {
		ObjectIdentifier objectID;
		RTC::Pose3D pose;
	};

	struct JointInfo {
		string name;
		double jointAngle;
		double jointDistance;
		double linkLength;
		double linkTwist;
		double maxAngle;
		double minAngle;
	};

	struct RobotJointInfo {
		sequence<JointInfo> jointInfoSeq;
	};

	struct RobotIdentifier {
		string name;
	};

	struct ManipulationPlan {
		RobotIdentifier robotID;
		sequence<RobotJointInfo> robotJointInfoSeq;
	};

	//underdeveloped
	struct CollisionInfo {
		string name;
	};

	//underdeveloped
	struct MeshInfo {
		string name;
	};

	interface ObjectDetectionService {
		void detectObject(in ObjectIdentifier objectID, out ObjectInfo objInfo);
		void setGeometry(in RTC::Geometry3D geometry);
	};

	interface CurrentStateService {
		void getCurrentState(out RobotJointInfo robotJoint);
	};

	interface CollisionDetectionService {
		boolean isCollide(in RobotIdentifier manipInfo, in RobotJointInfo jointSeq, out CollisionInfo collision);
	};

	interface ManipulationPlannerService {
		void planManipulation(in RobotIdentifier robotID, in RobotJointInfo startRobotJointInfo, in RobotJointInfo goalRobotJointInfo, out ManipulationPlan manipPlan);
	};

	interface ModelServerService {
		void getModelInfo(in RobotIdentifier robotID, out RobotJointInfo robotInfo);
		void getMeshInfo(in RobotIdentifier robotID, out MeshInfo mesh);
	};

	interface MotionGeneratorService {
		void followManipPlan(in ManipulationPlan manipPlan);
		void getCurrentRobotJointInfo(in RobotIdentifier robotID, out RobotJointInfo robotJoint);
	};


};

#endif
